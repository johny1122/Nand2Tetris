/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follow s:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:
     // Put your code here:
	
	// --LEFT chips-- the current instruction
    
    // mux in fetch-execute cycle - lecture 5 slide 22. data when executing, instruction when fetching
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=firstMuxOut); // an A-instruction has op-code=0. decide whether a or c instruction
    Mux(a=true,b=instruction[5],sel=instruction[15],out=loadA); // load to A Register, d1
	ARegister(in=firstMuxOut, load= loadA, out=ARegOut, out[0..14]=addressM );

	// --MIDDLE chips-- ALU input and program counter
    And(a=instruction[15],b=instruction[4],out=loadD); // load to D Register, d2
	DRegister(in= ALUOut,load= loadD,out=DRegOut ); //ALUOut, instruction[4]
	
	Mux16(a=ARegOut ,b=inM ,sel=instruction[12] ,out=secondMuxOut ); // used to be instruction[15]
	 
    // should the PC jump, relying on IsNegative, IsZero and j1-j3 bits from instruction. supplys "load" in PC
    //sends j1,j2,j3 bits to decide about jumping. if the current instruction is an a-instruction send j1 = j2 = j3 =0
    And(a=instruction[2],b=instruction[15],out=j1);
    And(a=instruction[1],b=instruction[15],out=j2);
    And(a=instruction[0],b=instruction[15],out=j3);

    And(a=j1,b= isNeg,out=negJ); // j1 for JLT, JNE, JLE, JMP. all apply for negative numbers.
    And(a=j2,b= isZero,out=zeroJ); // j2 for JEQ, JGE, JLE, JMP. all apply for zero.
    Or(a = negJ, b = zeroJ, out = negZeroJ);

    Or(a= isZero, b= isNeg, out= zeroOrNeg);
    Not(in= zeroOrNeg, out= pos);    
    And(a= pos, b= j3, out= posJ); // j3 for JGT, JNE, JGE, JMP. all apply for positive numbers.

    Or(a= negZeroJ, b= posJ, out= jumpOut);

	PC(in=ARegOut, load=jumpOut, inc=true, reset=reset ,out[0..14]=pc); // in = jump address, load = should jump, inc = default action
    
	// --RIGHT chips-- ALU and writeM

    ExtendAlu(x=DRegOut, y=secondMuxOut, instruction=instruction[6..14], out=outM, out=ALUOut, zr=isZero, ng=isNeg);
    	
	And(a=instruction[15], b=instruction[3], out=writeM); // d3 means write to RAM[A]	
}
