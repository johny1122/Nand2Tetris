/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
    IN x[16],y[16],instruction[9];
    OUT out[16],zr,ng;
    
    PARTS:

	ShiftLeft(in=x ,out=shiftLeftx );
	ShiftLeft(in=y ,out=shiftLefty );
	
	ShiftRight(in=x ,out=shiftRightx );
	ShiftRight(in=y ,out=shiftRighty );
	
	//out the correct shift according to instruction[4..5]
	Mux4Way16(a=shiftRighty ,b=shiftRightx ,c=shiftLefty ,d=shiftLeftx ,sel=instruction[4..5] ,out=shiftOut );
	
	Mul(a=x ,b=y ,out=aMulb );
	
	//If instruction[7] equals 0 output will be x*y, otherwise output will be shift
	Mux16(a=aMulb ,b=shiftOut ,sel=instruction[7] ,out=OutOf7or8 );
	
	//normal ALU output
	ALU(x=x ,y=y ,zx=instruction[5] ,nx=instruction[4] ,zy=instruction[3] ,ny=instruction[2] ,f=instruction[1] ,no=instruction[0] ,out=ALUOut ,zr=zrNotInUse ,ng=ngNotInUse );
	
	// if instruction[7..8] equals 1 out=1
	And(a=instruction[7] ,b=instruction[8] ,out=AreBoth7and8Equal1 );
	
	//if AreBoth7and8Equal1=1 out=normal ALU, otherwise out=shift output
	Mux16(a=OutOf7or8 ,b=ALUOut ,sel=AreBoth7and8Equal1 ,out=out, out[0..7]=halfleft, out[8..15]=halfright, out[15]=mostleftOut );
	
	//zr
	Or8Way(in=halfleft ,out=out1Or8 );
    Or8Way(in=halfright ,out=out2Or8 );
    Or(a=out1Or8 ,b=out2Or8 ,out=outOr );
    Not(in=outOr ,out=zr );
	
	//ng
    Not(in=mostleftOut ,out=notOut );
    Not(in=notOut ,out=ng );
	
}