// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean pixelWhite;
    static boolean pixelBlack;
    static boolean color;
    static Array screen;
    static Array two2The;
    static int screenSize;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
		let pixelWhite = false;
        let pixelBlack = true;
        let color = pixelBlack;
        let screenSize = 8191;

        let two2The = Array.new(16);
        let two2The[0] = 1;
        let two2The[1] = 2;
        let two2The[2] = 4;
        let two2The[3] = 8;
        let two2The[4] = 16;
        let two2The[5] = 32;
        let two2The[6] = 64;
        let two2The[7] = 128;
        let two2The[8] = 256;
        let two2The[9] = 512;
        let two2The[10] = 1024;
        let two2The[11] = 2048;
        let two2The[12] = 4096;
        let two2The[13] = 8192;
        let two2The[14] = 16384;
        let two2The[15] = 16384 + 16384;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < (screenSize + 1)){
            let screen[i] = pixelWhite;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bitMapPaint;
        let address = screen + (32 * y) + (x / 16);       //???????? how no to use mult ????????????

        let value = Memory.peek(address);
        let bitMapPaint = two2The[x & 15];
        if (color){ // color is black
            let value = value | bitMapPaint;
        }
        else{   // color is white
            let value = value & (~bitMapPaint);
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, diff, dx, dy, minX, minY;
        let a = 0; let b = 0; let diff = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;

        // different sign = north-east(↗) / south-west(↙)
        if (((dx > 0) & (dy < 0)) | ((dx < 0) & (dy > 0))){
            if (dx > 0){
                do Screen.drawDiagonal(x1, y1, dx, dy);
            }
            else{
                do Screen.drawDiagonal(x2, y2, -dx, -dy);
            }
            return;
        }

        let dy = Math.abs(dy);
        let dx = Math.abs(dx);

        let minX = Math.min(x1, x2);
        let minY = Math.min(y1, y2);

        if (dx = 0){   // line is vertical
            do Screen.drawVertical(minX, minY, dy);
            return;

        }
        else {
            if (dy = 0){   // line is horizontal
            do Screen.drawHorizontal(minX, minY, dx);
            return;
            }
        }

        // same sign = north-west(↖) / sout-east(↘)

        while ((~(a > dx)) & (~(b > dy))){
            do Screen.drawPixel(minX + a, minY + b);
            if (diff < 0){
                let a = a + 1;
                let diff = diff + dy;
            }
            else{
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }


    /** draw a diagonal line in the directions north-east(↗) / south-west(↙) */
    function void drawDiagonal(int x, int y, int dx, int dy){
        var int a, b, diff;
        let diff = 0; let a = 0; let b = 0;
        while ((~(a > dx)) & (~(b < dy))){
            do Screen.drawPixel(x + a, y + b);
            if (diff < 0){
                let b = b - 1;
                let diff = diff + dx;
            }
            else{
                let a = a + 1;
                let diff = diff + dy;
            }
        }
        return;
    }

    /** draw an horizontal line */
    function void drawHorizontal(int x, int y, int dx){
        var int a;
        let a = 0;
        while (~(a > dx)){
            do Screen.drawPixel(x + a, y);
            let a = a + 1;
        }
        return;
    }


     /** draw a vertical lin with Screen.drawPixel */
     function void drawVertical(int x, int y, int dy){
        var int b;
        let b = 0;
        while (~(b > dy)){
            do Screen.drawPixel(x, y + b);
            let b = b + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx, dy, i;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let i = 0;
        while (i < dy){
            do Screen.drawHorizontal(x1, y1 + i, dx);
            let i = i + 1;
        }
        return;
    }


    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int cx, int cy, int r) {
        var int dy, sqrt, rMultr;
        if (r > 181){
            do Sys.error(13);
        }
        let dy = -r;
        let rMultr = r*r;
        while (~(dy > r)){
            let sqrt = Math.sqrt(rMultr - (dy*dy));
            do Screen.drawHorizontal(cx - sqrt, cy + dy, sqrt + sqrt);
            let dy = dy + 1;
        }
        return;
    }
}
