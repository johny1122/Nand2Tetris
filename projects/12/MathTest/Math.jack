// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return (-x);
        }
        return x;
    }

    /**Returns true if the i-th bit of the integer x is 1 and false otherwise. */
    function boolean bit(int x, int i){
        if (x & twoToThe[i]){
            return true;
        }
        return false;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, i, shiftedX;
        var int bit;
        let sum = 0; let shiftedX = x; let i = 0;
        let bit = 1;
        while (i < 16){
            if ((y & bit) = bit){
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
            let bit = bit + bit;
        }
        return sum;

        // another way using the bit function:

        // var int sum, i, shiftedX;     
        // let sum = 0; let shiftedX = x; let i = 0;
        // while (i < 16){
        //     if (bit(y, i)){
        //         let sum = sum + shiftedX;
        //     }
        //     let shiftedX = shiftedX + shiftedX;
        //     let i = i + 1;
        // }
        // return sum;
    }

    
    /** Returns the positive integer part of x/y.
     *  divide 2 positive integers.
     */
    function int divide_abs(int x, int y){
        
        if ((y > x) | (y < 0)){
            return 0;
        }
        var int q;
        let q = divide_abs(x, y+y);
        if ((x - ((q + q) * y)) < y){  //????????????how to not use mult?????????????
            return q+q;
        }
        else{
            return (q+q + 1);
        }
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the divide operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        let q = divide_abs(abs(x), abs(y));
        if ((x > 0) = (y > 0)){     // have the same sign
            return q;
        }
        else{       // dont have the same sign
            return -q;
        }
    }


    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, temp, tempMultemp;
        let y = 0; let i = 15;

        while (~(i < 0)){
            let temp = y + twoToThe[i];
            let tempMultemp = temp * temp;
            if (~(tempMultemp > x)){
                let y = temp;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b){
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b){
            return a;
        }
        return b;
    }
}
