// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack


/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int max_length;

    static int minus;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0){
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let length = 0;
        let max_length = maxLength;
        let minus = 45; // code in ascii
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(str);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < max_length){
            let str[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0){
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, d;
        var boolean negative;
        var boolean break;
        let val = 0;
        let i = 0;
        let break = false;
        if ((length > 0) & (str[0] = minus)){
            let i = 1;
            let negative = true;
        }
        else{
            let i = 0;
            let negative = false;
        }
        while ((i < length) & (~break)){
            if ((str[i] > 47) & (str[i] < 58)){ // char is digit
                let d = (str[i] - 48);
                let val = ((val * 10) + d);
            }
            else{   // char is not digit - break
                let break = true;
            }
            let i = i + 1;
        }
        if (negative){
            return -val;
        }
        return val;
    }

    
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;

        if (val < 0){   // if negative - change to positive and add minus to beginning of string
            let val = -val;
            do appendChar(minus);
        }
        do calculateSetInt(val);
        return;
    }


    /** calculate the int for the setInt method. it is necessary to split the method because otherwise
    the length will always change to 0 at the beginning of the setInt method*/
    method void calculateSetInt(int val){
        var int lastDigit;
        var int valDividedByTen;
        let valDividedByTen = val / 10;
        let lastDigit = (val - (valDividedByTen * 10));
        if (val < 10){
            do appendChar(lastDigit + 48); 
        }
        else{
            do calculateSetInt(valDividedByTen);
            do appendChar(lastDigit + 48);
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
