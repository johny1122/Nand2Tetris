// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // Put your code here:
	
	DMux(in=load ,sel=address[2] ,a=a0 ,b=b0 );
	
	DMux(in=a0 ,sel=address[1] ,a=a1 ,b=b1 );
	DMux(in=a1 ,sel=address[0] ,a=load0 ,b=load1 );
	DMux(in=b1 ,sel=address[0] ,a=load2 ,b=load3 );
	
	DMux(in=b0 ,sel=address[1] ,a=a4 ,b=b4 );
	DMux(in=a4 ,sel=address[0] ,a=load4 ,b=load5 );
	DMux(in=b4 ,sel=address[0] ,a=load6 ,b=load7 );
	
	RAM64(in=in ,load=load0 ,address=address[3..8] ,out=out0 );
	RAM64(in=in ,load=load1 ,address=address[3..8] ,out=out1 );
	RAM64(in=in ,load=load2 ,address=address[3..8] ,out=out2 );
	RAM64(in=in ,load=load3 ,address=address[3..8] ,out=out3 );
	RAM64(in=in ,load=load4 ,address=address[3..8] ,out=out4 );
	RAM64(in=in ,load=load5 ,address=address[3..8] ,out=out5 );
	RAM64(in=in ,load=load6 ,address=address[3..8] ,out=out6 );
	RAM64(in=in ,load=load7 ,address=address[3..8] ,out=out7 );
	
	Mux8Way16(a=out0 ,b=out1 ,c=out2 ,d=out3 ,e=out4 ,f=out5 ,g=out6 ,h=out7 ,sel=address[0..2] ,out=out );
}